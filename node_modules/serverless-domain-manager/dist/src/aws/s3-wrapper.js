"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const aws_sdk_1 = require("aws-sdk");
const utils_1 = require("../utils");
const globals_1 = require("../globals");
class S3Wrapper {
    constructor(credentials) {
        this.s3 = new aws_sdk_1.S3(credentials);
    }
    /**
     * * Checks whether the Mutual TLS certificate exists in S3 or not
     */
    assertTlsCertObjectExists(domain) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { Bucket, Key } = this.extractBucketAndKey(domain.tlsTruststoreUri);
                const params = { Bucket, Key };
                if (domain.tlsTruststoreVersion) {
                    params.VersionId = domain.tlsTruststoreVersion;
                }
                yield (0, utils_1.throttledCall)(this.s3, "headObject", params);
            }
            catch (err) {
                if (err.statusCode !== 403) {
                    throw Error(`Could not head S3 object at ${domain.tlsTruststoreUri}.\n${err.message}`);
                }
                globals_1.default.logWarning(`Forbidden to check the existence of the S3 object ${domain.tlsTruststoreUri} due to\n${err}`);
            }
        });
    }
    /**
     * * Extracts Bucket and Key from the given s3 uri
     */
    extractBucketAndKey(uri) {
        const { hostname, pathname } = new URL(uri);
        return { Bucket: hostname, Key: pathname.substring(1) };
    }
}
module.exports = S3Wrapper;
