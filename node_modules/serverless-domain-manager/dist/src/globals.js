"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Globals {
    static getBaseStage() {
        return Globals.options.stage || Globals.serverless.service.provider.stage;
    }
    static cliLog(prefix, message) {
        Globals.serverless.cli.log(`${prefix} ${message}`, Globals.pluginName);
    }
    /**
     * Logs error message
     */
    static logError(message) {
        if (Globals.v3Utils) {
            Globals.v3Utils.log.error(message);
        }
        else {
            Globals.cliLog("[Error]", message);
        }
    }
    /**
     * Logs info message
     */
    static logInfo(message) {
        if (Globals.v3Utils) {
            Globals.v3Utils.log.verbose(message);
        }
        else {
            Globals.cliLog("[Info]", message);
        }
    }
    /**
     * Logs warning message
     */
    static logWarning(message) {
        if (Globals.v3Utils) {
            Globals.v3Utils.log.warning(message);
        }
        else {
            Globals.cliLog("[WARNING]", message);
        }
    }
    /**
     * Prints out a summary of all domain manager related info
     */
    static printDomainSummary(domains) {
        const summaryList = [];
        domains.forEach((domain) => {
            if (domain.domainInfo) {
                summaryList.push(`Domain Name: ${domain.givenDomainName}`);
                summaryList.push(`Target Domain: ${domain.domainInfo.domainName}`);
                summaryList.push(`Hosted Zone Id: ${domain.domainInfo.hostedZoneId}`);
            }
        });
        // don't print summary if summaryList is empty
        if (!summaryList.length) {
            return;
        }
        if (Globals.v3Utils) {
            Globals.serverless.addServiceOutputSection(Globals.pluginName, summaryList);
        }
        else {
            Globals.cliLog("[Summary]", "Distribution Domain Name");
            summaryList.forEach((item) => {
                Globals.cliLog("", `${item}`);
            });
        }
    }
}
exports.default = Globals;
Globals.pluginName = "Serverless Domain Manager";
Globals.defaultRegion = "us-east-1";
Globals.defaultBasePath = "(none)";
Globals.defaultStage = "$default";
// https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-known-issues.html
Globals.reservedBasePaths = ["ping", "sping"];
Globals.endpointTypes = {
    edge: "EDGE",
    regional: "REGIONAL",
};
Globals.apiTypes = {
    http: "HTTP",
    rest: "REST",
    websocket: "WEBSOCKET",
};
Globals.gatewayAPIIdKeys = {
    [Globals.apiTypes.rest]: "restApiId",
    [Globals.apiTypes.websocket]: "websocketApiId",
};
// Cloud Formation Resource Ids
Globals.CFResourceIds = {
    [Globals.apiTypes.http]: "HttpApi",
    [Globals.apiTypes.rest]: "ApiGatewayRestApi",
    [Globals.apiTypes.websocket]: "WebsocketsApi",
};
// https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference.html
Globals.CFFuncNames = {
    fnImport: "Fn::ImportValue",
    ref: "Ref"
};
/*eslint camelcase: ["error", {allow: ["^tls_"]}]*/
Globals.tlsVersions = {
    tls_1_0: "TLS_1_0",
    tls_1_2: "TLS_1_2",
};
Globals.routingPolicies = {
    simple: "simple",
    latency: "latency",
    weighted: "weighted",
};
