"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const DomainInfo = require("../models/domain-info");
const globals_1 = require("../globals");
const aws_sdk_1 = require("aws-sdk");
const utils_1 = require("../utils");
const ApiGatewayMap = require("../models/api-gateway-map");
const APIGatewayBase = require("../models/apigateway-base");
class APIGatewayV2Wrapper extends APIGatewayBase {
    constructor(credentials) {
        super();
        this.apiGateway = new aws_sdk_1.ApiGatewayV2(credentials);
    }
    /**
     * Creates Custom Domain Name
     * @param domain: DomainConfig
     */
    createCustomDomain(domain) {
        return __awaiter(this, void 0, void 0, function* () {
            const providerTags = Object.assign(Object.assign({}, globals_1.default.serverless.service.provider.stackTags), globals_1.default.serverless.service.provider.tags);
            const params = {
                DomainName: domain.givenDomainName,
                DomainNameConfigurations: [{
                        CertificateArn: domain.certificateArn,
                        EndpointType: domain.endpointType,
                        SecurityPolicy: domain.securityPolicy,
                    }],
                Tags: providerTags
            };
            const isEdgeType = domain.endpointType === globals_1.default.endpointTypes.edge;
            if (!isEdgeType && domain.tlsTruststoreUri) {
                params.MutualTlsAuthentication = {
                    TruststoreUri: domain.tlsTruststoreUri
                };
                if (domain.tlsTruststoreVersion) {
                    params.MutualTlsAuthentication.TruststoreVersion = domain.tlsTruststoreVersion;
                }
            }
            try {
                const domainInfo = yield (0, utils_1.throttledCall)(this.apiGateway, "createDomainName", params);
                return new DomainInfo(domainInfo);
            }
            catch (err) {
                throw new Error(`V2 - Failed to create custom domain '${domain.givenDomainName}':\n${err.message}`);
            }
        });
    }
    /**
     * Get Custom Domain Info
     * @param domain: DomainConfig
     */
    getCustomDomain(domain) {
        return __awaiter(this, void 0, void 0, function* () {
            // Make API call
            try {
                const domainInfo = yield (0, utils_1.throttledCall)(this.apiGateway, "getDomainName", {
                    DomainName: domain.givenDomainName,
                });
                return new DomainInfo(domainInfo);
            }
            catch (err) {
                if (err.code !== "NotFoundException") {
                    throw new Error(`V2 - Unable to fetch information about '${domain.givenDomainName}':\n${err.message}`);
                }
                globals_1.default.logInfo(`V2 - '${domain.givenDomainName}' does not exist.`);
            }
        });
    }
    /**
     * Delete Custom Domain Name
     * @param domain: DomainConfig
     */
    deleteCustomDomain(domain) {
        return __awaiter(this, void 0, void 0, function* () {
            // Make API call
            try {
                yield (0, utils_1.throttledCall)(this.apiGateway, "deleteDomainName", {
                    DomainName: domain.givenDomainName,
                });
            }
            catch (err) {
                throw new Error(`V2 - Failed to delete custom domain '${domain.givenDomainName}':\n${err.message}`);
            }
        });
    }
    /**
     * Create Base Path Mapping
     * @param domain: DomainConfig
     */
    createBasePathMapping(domain) {
        return __awaiter(this, void 0, void 0, function* () {
            let stage = domain.baseStage;
            if (domain.apiType === globals_1.default.apiTypes.http) {
                // find a better way how to implement custom stage for the HTTP API type
                stage = globals_1.default.defaultStage;
            }
            try {
                yield (0, utils_1.throttledCall)(this.apiGateway, "createApiMapping", {
                    ApiId: domain.apiId,
                    ApiMappingKey: domain.basePath,
                    DomainName: domain.givenDomainName,
                    Stage: stage,
                });
                globals_1.default.logInfo(`V2 - Created API mapping '${domain.basePath}' for '${domain.givenDomainName}'`);
            }
            catch (err) {
                throw new Error(`V2 - Unable to create base path mapping for '${domain.givenDomainName}':\n${err.message}`);
            }
        });
    }
    /**
     * Get APi Mapping
     * @param domain: DomainConfig
     */
    getBasePathMappings(domain) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const items = yield (0, utils_1.getAWSPagedResults)(this.apiGateway, "getApiMappings", "Items", "NextToken", "NextToken", { DomainName: domain.givenDomainName });
                return items.map((item) => new ApiGatewayMap(item.ApiId, item.ApiMappingKey, item.Stage, item.ApiMappingId));
            }
            catch (err) {
                throw new Error(`V2 - Make sure the '${domain.givenDomainName}' exists. Unable to get API Mappings:\n${err.message}`);
            }
        });
    }
    /**
     * Update APi Mapping
     * @param domain: DomainConfig
     */
    updateBasePathMapping(domain) {
        return __awaiter(this, void 0, void 0, function* () {
            let stage = domain.baseStage;
            if (domain.apiType === globals_1.default.apiTypes.http) {
                // find a better way how to implement custom stage for the HTTP API type
                stage = globals_1.default.defaultStage;
            }
            try {
                yield (0, utils_1.throttledCall)(this.apiGateway, "updateApiMapping", {
                    ApiId: domain.apiId,
                    ApiMappingId: domain.apiMapping.apiMappingId,
                    ApiMappingKey: domain.basePath,
                    DomainName: domain.givenDomainName,
                    Stage: stage,
                });
                globals_1.default.logInfo(`V2 - Updated API mapping to '${domain.basePath}' for '${domain.givenDomainName}'`);
            }
            catch (err) {
                throw new Error(`V2 - Unable to update base path mapping for '${domain.givenDomainName}':\n${err.message}`);
            }
        });
    }
    /**
     * Delete Api Mapping
     */
    deleteBasePathMapping(domain) {
        return __awaiter(this, void 0, void 0, function* () {
            const params = {
                ApiMappingId: domain.apiMapping.apiMappingId,
                DomainName: domain.givenDomainName,
            };
            // Make API call
            try {
                yield (0, utils_1.throttledCall)(this.apiGateway, "deleteApiMapping", params);
                globals_1.default.logInfo(`V2 - Removed API Mapping with id: '${domain.apiMapping.apiMappingId}'`);
            }
            catch (err) {
                throw new Error(`V2 - Unable to remove base path mapping for '${domain.givenDomainName}':\n${err.message}`);
            }
        });
    }
}
module.exports = APIGatewayV2Wrapper;
