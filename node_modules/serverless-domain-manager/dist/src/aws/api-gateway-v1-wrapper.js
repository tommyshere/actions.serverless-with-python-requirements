"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const DomainInfo = require("../models/domain-info");
const globals_1 = require("../globals");
const aws_sdk_1 = require("aws-sdk");
const utils_1 = require("../utils");
const ApiGatewayMap = require("../models/api-gateway-map");
const APIGatewayBase = require("../models/apigateway-base");
class APIGatewayV1Wrapper extends APIGatewayBase {
    constructor(credentials) {
        super();
        this.apiGateway = new aws_sdk_1.APIGateway(credentials);
    }
    /**
     * Creates Custom Domain Name
     * @param domain: DomainConfig
     */
    createCustomDomain(domain) {
        return __awaiter(this, void 0, void 0, function* () {
            const providerTags = Object.assign(Object.assign({}, globals_1.default.serverless.service.provider.stackTags), globals_1.default.serverless.service.provider.tags);
            const params = {
                domainName: domain.givenDomainName,
                endpointConfiguration: {
                    types: [domain.endpointType],
                },
                securityPolicy: domain.securityPolicy,
                tags: providerTags,
            };
            const isEdgeType = domain.endpointType === globals_1.default.endpointTypes.edge;
            if (isEdgeType) {
                params.certificateArn = domain.certificateArn;
            }
            else {
                params.regionalCertificateArn = domain.certificateArn;
                if (domain.tlsTruststoreUri) {
                    params.mutualTlsAuthentication = {
                        truststoreUri: domain.tlsTruststoreUri
                    };
                    if (domain.tlsTruststoreVersion) {
                        params.mutualTlsAuthentication.truststoreVersion = domain.tlsTruststoreVersion;
                    }
                }
            }
            try {
                const domainInfo = yield (0, utils_1.throttledCall)(this.apiGateway, "createDomainName", params);
                return new DomainInfo(domainInfo);
            }
            catch (err) {
                throw new Error(`V1 - Failed to create custom domain '${domain.givenDomainName}':\n${err.message}`);
            }
        });
    }
    /**
     * Get Custom Domain Info
     */
    getCustomDomain(domain) {
        return __awaiter(this, void 0, void 0, function* () {
            // Make API call
            try {
                const domainInfo = yield (0, utils_1.throttledCall)(this.apiGateway, "getDomainName", {
                    domainName: domain.givenDomainName,
                });
                return new DomainInfo(domainInfo);
            }
            catch (err) {
                if (err.code !== "NotFoundException") {
                    throw new Error(`V1 - Unable to fetch information about '${domain.givenDomainName}':\n${err.message}`);
                }
                globals_1.default.logInfo(`V1 - '${domain.givenDomainName}' does not exist.`);
            }
        });
    }
    /**
     * Delete Custom Domain Name through API Gateway
     */
    deleteCustomDomain(domain) {
        return __awaiter(this, void 0, void 0, function* () {
            // Make API call
            try {
                yield (0, utils_1.throttledCall)(this.apiGateway, "deleteDomainName", {
                    domainName: domain.givenDomainName,
                });
            }
            catch (err) {
                throw new Error(`V1 - Failed to delete custom domain '${domain.givenDomainName}':\n${err.message}`);
            }
        });
    }
    createBasePathMapping(domain) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield (0, utils_1.throttledCall)(this.apiGateway, "createBasePathMapping", {
                    basePath: domain.basePath,
                    domainName: domain.givenDomainName,
                    restApiId: domain.apiId,
                    stage: domain.baseStage,
                });
                globals_1.default.logInfo(`V1 - Created API mapping '${domain.basePath}' for '${domain.givenDomainName}'`);
            }
            catch (err) {
                throw new Error(`V1 - Make sure the '${domain.givenDomainName}' exists.
                 Unable to create base path mapping for '${domain.givenDomainName}':\n${err.message}`);
            }
        });
    }
    getBasePathMappings(domain) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const items = yield (0, utils_1.getAWSPagedResults)(this.apiGateway, "getBasePathMappings", "items", "position", "position", { domainName: domain.givenDomainName });
                return items.map((item) => {
                    return new ApiGatewayMap(item.restApiId, item.basePath, item.stage, null);
                });
            }
            catch (err) {
                throw new Error(`V1 - Make sure the '${domain.givenDomainName}' exists.
                 Unable to get Base Path Mappings:\n${err.message}`);
            }
        });
    }
    updateBasePathMapping(domain) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield (0, utils_1.throttledCall)(this.apiGateway, "updateBasePathMapping", {
                    basePath: domain.apiMapping.basePath,
                    domainName: domain.givenDomainName,
                    patchOperations: [{
                            op: "replace",
                            path: "/basePath",
                            value: domain.basePath,
                        }]
                });
                globals_1.default.logInfo(`V1 - Updated API mapping from '${domain.apiMapping.basePath}'
                    to '${domain.basePath}' for '${domain.givenDomainName}'`);
            }
            catch (err) {
                throw new Error(`V1 - Unable to update base path mapping for '${domain.givenDomainName}':\n${err.message}`);
            }
        });
    }
    /**
     * Deletes basepath mapping
     */
    deleteBasePathMapping(domain) {
        return __awaiter(this, void 0, void 0, function* () {
            // Make API call
            try {
                yield (0, utils_1.throttledCall)(this.apiGateway, "deleteBasePathMapping", {
                    basePath: domain.apiMapping.basePath,
                    domainName: domain.givenDomainName,
                });
                globals_1.default.logInfo(`V1 - Removed '${domain.apiMapping.basePath}' base path mapping`);
            }
            catch (err) {
                throw new Error(`V1 - Unable to remove base path mapping for '${domain.givenDomainName}':\n${err.message}`);
            }
        });
    }
}
module.exports = APIGatewayV1Wrapper;
